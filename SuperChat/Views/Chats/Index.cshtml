@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@using SuperChat.BL.DTOs;
@using SuperChat.Identity;

@model List<ChatRoomDto>;

<div id="vueAppContainer" class="container">
    <h3 class=" text-center">Messaging</h3>
    <div class="messaging">
        <div class="inbox_msg">
            <div class="inbox_people">
                <div class="headind_srch">
                    <div class="recent_heading">
                        <h4>Recent</h4>
                    </div>
                    @*<div class="srch_bar">
                            <div class="stylish-input-group">
                                <input type="text" class="search-bar" placeholder="Search">
                                <span class="input-group-addon">
                                    <button type="button"> <i class="fa fa-search" aria-hidden="true"></i> </button>
                                </span>
                            </div>
                        </div>*@
                </div>
                <div class="inbox_chat">
                    <div v-for="chatRoom in chatRooms" v-on:click="setActiveChatRoom(chatRoom)" :class="{'chat_list': true, 'active_chat': chatRoom.id == (activeChatRoom || {}).id }">
                        <div class="chat_people">
                            <div class="chat_img"> <img :src="'https://avatars.dicebear.com/4.5/api/jdenticon/'+chatRoom.Code+'.svg'" alt="sunil"> </div>
                            <div class="chat_ib">
                                <h5>{{chatRoom.name}} <span class="chat_date"></span></h5>
                                <p>
                                    Code: {{chatRoom.code}}
                                </p>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="mesgs">
                <div class="msg_history">
                    <template v-if="activeChatRoom">
                        <template v-if="loadingMessages">
                            <div class="spinner-border" role="status">
                                <span class="sr-only">Cargando...</span>
                            </div>
                        </template>
                        <template v-else>
                            <template v-for="message in reversedMessages" v-key="message.id">
                                <template v-if="message.fromUser == currentUserEmail">
                                    <div class="outgoing_msg">
                                        <div class="sent_msg">
                                            <p>
                                                {{message.messageText}}
                                            </p>
                                            <span class="time_date"> {{convertUtcToLocal(message.ocurredAt)}}</span>
                                        </div>
                                    </div>
                                </template>
                                <template v-else>
                                    <div class="incoming_msg">
                                        <div class="incoming_msg_img"> <img :src="getAvatarImage(message)" alt="sunil"> </div>
                                        <div class="received_msg">
                                            <div class="received_withd_msg">
                                                <p>
                                                    {{message.messageText}}
                                                </p>
                                                <span class="time_date"> {{message.fromUser}} - {{convertUtcToLocal(message.ocurredAt)}}</span>
                                            </div>
                                        </div>
                                    </div>
                                </template>
                            </template>
                        </template>
                    </template>
                    <h2 v-else>Please select a chatroom</h2>
                </div>
                <div class="type_msg">
                    <div class="input_msg_write">
                        <form v-on:submit.prevent="sendMessage">
                            <input v-model="messageInput" :disabled="!connectionIsActive || !activeChatRoom" type="text" class="write_msg" placeholder="Type a message" />
                            <button class="msg_send_btn" :disabled="!connectionIsActive || !activeChatRoom" type="button"><i class="fa fa-paper-plane-o" aria-hidden="true"></i></button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

@section Scripts {
    <!-- development version, includes helpful console warnings -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js" integrity="sha512-qTXRIMyZIFb8iQcfjXWCO8+M5Tbc38Qi5WzdPOYZHIlZpzBHG3L3by84BBBOiRGiEb7KKtAOAs5qYdUiZiQNNQ==" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script>
        var app = new Vue({
            el: '#vueAppContainer',
            data: function() {
                return {
                    signalRConnection: null,
                    connectionIsActive: false,
                    loadingMessages: false,
                    currentUserEmail: "@User.Identity.Name",
                    chatRooms: @Html.Raw(Json.Serialize(Model)),
                    messageInput: "",
                    activeChatRoom: null,
                    messages: []
                };
            },
            computed: {
                reversedMessages: function () {
                    // `this` points to the vm instance
                    return this.messages.slice(0, 51).reverse();
                }
            },
            created: function () {
                this.signalRConnection = new signalR
                    .HubConnectionBuilder()
                    .withUrl("/chatroomhub")
                    .build();
                //
                //Register all listeners
                this.signalRConnection.on("ReceiveMessage", this.onMessageReceived);
                this.signalRConnection.on("ChatHistory", this.onChatHistoryArrive);
                //
                this.signalRConnection.start().then(() => {
                    this.connectionIsActive = true;
                }).catch(function (err) {
                    return console.error(err.toString());
                });
            },
            methods: {
                sendMessage: function() {
                    if (!this.messageInput)
                        return;

                    let chatRoomId = this.activeChatRoom.id;
                    let chatRoomCode = this.activeChatRoom.code;
                    let userEmail = this.currentUserEmail;
                    let message = this.messageInput;

                    this.signalRConnection.invoke("SendMessage", chatRoomCode, ""+chatRoomId, userEmail, message)
                        .catch(function (err) {
                        return console.error(err.toString());
                        })
                        .finally(() => {
                            this.messageInput = "";
                        });
                    console.log(this.messageInput);
                },
                onMessageReceived: function (chatRoomMessageDto) {
                    this.messages.unshift(chatRoomMessageDto);
                    console.log("Recived message:")
                    console.log(chatRoomMessageDto)
                },
                onChatHistoryArrive: function (chatRoomMessagesArray) {
                    console.log(chatRoomMessagesArray);
                    this.messages = chatRoomMessagesArray;
                    this.loadingMessages = false;
                },
                setActiveChatRoom: function (chatRoom) {
                    let previusChatRoom = this.activeChatRoom;
                    //Close previus chatRoom
                    if (previusChatRoom)
                        this.signalRConnection.invoke("RemoveFromChatRoom", previusChatRoom.code);

                    this.activeChatRoom = chatRoom;
                    //Add this connection to chatRoom
                    this.signalRConnection.invoke("AddToChatRoom", this.activeChatRoom.code)
                        .then(() => {
                            //Wait to be added to group before requesting next conversation
                            this.requestChatHistory(chatRoom.id);
                        })
                },
                requestChatHistory: function (chatRoomId) {
                    this.loadingMessages = true;
                    this.signalRConnection.invoke("RequestChatHistory", ""+chatRoomId).catch(function (err) {
                        return console.error(err.toString());
                    });
                },
                convertUtcToLocal: function (dateTimeString) {
                    return moment.utc(dateTimeString).local().calendar();
                },
                getAvatarImage: function (message) {
                    if (message.fromUser.toLowerCase() == "bot")
                        return 'https://avatars.dicebear.com/4.5/api/bottts/1.svg'
                    else
                        return 'https://avatars.dicebear.com/4.5/api/human/'+message.fromUser+'.svg'
                }
            }
        })
    </script>
}
